{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "esVersion": {
      "type": "string",
      "defaultValue": "2.0.0",
      "allowedValues": [
        "2.0.0"
      ],
      "metadata": {
        "description": "Elasticsearch version to install"
      }
    },
    "esClusterName": {
      "type": "string",
      "defaultValue": "elasticsearch",
      "metadata": {
        "description": "The name of the Elasticsearch cluster"
      }
    },
    "loadBalancerType": {
      "type": "string",
      "defaultValue": "internal",
      "allowedValues": [
        "internal",
        "external"
      ],
      "metadata": {
        "description": "Setup the load balancer internal or external.  If you are setting up Elasticsearch on an external endpoint you will need to secure your nodes with a product like Elasticsearch Shield"
      }
    },
    "esPlugins": {
      "type": "string",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "defaultValue": "Yes",
      "metadata": {
        "description": "Install the Plugins - Marvel, Shield, Watcher"
      }
    },
    "kibana":{
      "type":"string",
      "defaultValue":"No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Provision a machine with Kibana on it"
      }
    },
    "jumpbox": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Optionally add a virtual machine to the deployment which you can use to connect and manage virtual machines on the internal network"
      }
    },
    "vmSizeDataNodes": {
      "type": "string",
      "defaultValue": "Standard_A2",
      "allowedValues": [
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A7",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS13"
      ],
      "metadata": {
        "description": "Size of the Elasticsearch data nodes"
      }
    },
    "vmDataNodeCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of Elasticsearch data nodes"
      }
    },
    "dataNodesAreMasterEligible": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Make all datanodes master eligible, this can be useful for small elasticsearch cluster deploys"
      }
    },
    "vmSizeMasterNodes": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "allowedValues": [
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
      	"Standard_A0",
      	"Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A7",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS13"
      ],
      "metadata": {
        "description": "Size of the Elasticsearch master nodes, if data nodes are not master eligible 3 of these will be provisioned"
      }
    },
    "vmClientNodeCount": {
      "type": "int",
      "defaultValue": 0,
      "allowedValues": [
        0,
        3,
        5,
        7
      ],
      "metadata": {
        "description": "Number of Elasticsearch client nodes to provision (Setting this to zero puts the data nodes on the load balancer)"
      }
    },
    "vmSizeClientNodes": {
      "type": "string",
      "defaultValue": "Standard_A2",
      "allowedValues": [
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
      	"Standard_A0",
      	"Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A7",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS13"
      ],
      "metadata": {
        "description": "Size of the Elasticsearch cluster client nodes"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username used when provisioning virtual machines"
      }
    },
    "password" : {
      "type" : "object",
      "metadata" : {
        "description" : ""
      }
    },
    "shieldAdminPassword": {
      "type": "securestring",
      "defaultValue": "changeME",
      "metadata": {
        "description": "Shield password for the 'es_admin' user with admin role, must be > 6 characters"
      }
    },
    "shieldReadPassword": {
      "type": "securestring",
      "defaultValue": "changeME",
      "metadata": {
        "description": "Shield password for the 'es_read' user with user (read-only) role, must be > 6 characters"
      }
    },
    "shieldKibanaPassword": {
      "type": "securestring",
      "defaultValue": "changeME",
      "metadata": {
        "description": "Shield password for the `es_kibana` user with kibana4 role, must be > 6 characters"
      }
    },
    "location": {
      "type": "string",
      "allowedValues": [
        "ResourceGroup",
        "westus",
        "eastus",
        "eastus2",
        "centralus",
        "southcentralus",
        "northcentralus",
        "eastasia",
        "southeastasia",
        "westeurope",
        "northeurope"
      ],
      "defaultValue": "ResourceGroup",
      "metadata": {
        "description": "Location where resources will be provisioned.  A value of 'ResourceGroup' will deploy the resource to the same location of the resource group the resources are provisioned into"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "esvnet",
      "metadata": {
        "description": "Virtual Network"
      }
    }
  },
  "variables": {
    "templateBaseUrl": "https://raw.githubusercontent.com/Mpdreamz/ARM-Templates/master/elastic/",
    "masterTemplates": {
       "No" : "master-nodes-resources.json",
       "Yes" : "no-master-nodes-resources.json"
    },
    "masterTemplateUrl": "[concat(variables('templateBaseUrl'), variables('masterTemplates')[parameters('dataNodesAreMasterEligible')])]",
    "jumpboxTemplates": {
       "No" : "empty-resources.json",
       "Yes" : "jumpbox-resources.json"
    },
    "jumpboxTemplateUrl": "[concat(variables('templateBaseUrl'), variables('jumpboxTemplates')[parameters('jumpbox')])]",
    "kibanaTemplates": {
      "No": "empty-resources.json",
      "Yes": "kibana-resources.json"
    },
    "kibanaTemplateUrl":"[concat(variables('templateBaseUrl'), variables('kibanaTemplates')[parameters('kibana')])]",
    "clientTemplates": {
      "n0": "empty-resources.json",
      "n3": "client-nodes-resources.json",
      "n5": "client-nodes-resources.json",
      "n7": "client-nodes-resources.json"
    },
    "clientTemplateUrl": "[concat(variables('templateBaseUrl'), variables('clientTemplates')[concat('n',parameters('vmClientNodeCount'))])]",
    "esSettings": {
      "clusterName": "[parameters('esClusterName')]",
      "version": "[parameters('esVersion')]",
      "installPlugins": "[parameters('esPlugins')]",
      "shieldAdminPwd": "[parameters('shieldAdminPassword')]",
      "shieldReadPwd": "[parameters('shieldReadPassword')]",
      "shieldKibanaPwd": "[parameters('shieldKibanaPassword')]",
      "shieldKibanaServerPwd": "[uniqueString(resourceGroup().id, deployment().name)]"
    },
    "dataNodeShortOpts": {
      "No" : "z",
      "Yes" : ""
    },
    "dataNodeShortOpt" : "[variables('dataNodeShortOpts')[parameters('dataNodesAreMasterEligible')]]",
    "dedicatedMasterNodesShortOpts": {
      "No" : "d",
      "Yes" : ""
    },
    "dedicatedMasterNodesShortOpt" : "[variables('dedicatedMasterNodesShortOpts')[parameters('dataNodesAreMasterEligible')]]",
    "installPluginsShortOpts": {
      "No" : "",
      "Yes" : "l"
    },
    "installPluginsShortOpt" : "[variables('installPluginsShortOpts')[variables('esSettings').installPlugins]]",
    "commonShortOpts" : "[concat(variables('dedicatedMasterNodesShortOpt'),  variables('installPluginsShortOpt'), 'n ')]",
    "commonInstallParams" : "[concat(variables('esSettings').clusterName, ' -v ', variables('esSettings').version, ' -A ', variables('esSettings').shieldAdminPwd, ' -R ', variables('esSettings').shieldReadPwd, ' -K ', variables('esSettings').shieldKibanaPwd, ' -S ', variables('esSettings').shieldKibanaServerPwd, ' -Z ', parameters('vmDataNodeCount'))]",
    "ubuntuScripts": [
      "[concat(variables('templateBaseUrl'), 'elasticsearch-ubuntu-install.sh')]",
      "[concat(variables('templateBaseUrl'), 'kibana-install.sh')]",
      "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/shared_scripts/ubuntu/vm-disk-utils-0.1.sh"
    ],
    "ubuntuSettings": {
      "imageReference":{
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "14.04.2-LTS",
        "version": "latest"
      },
      "managementPort":"22",
      "extentionSettings":{
        "master": {
            "publisher": "Microsoft.OSTCExtensions",
            "type": "CustomScriptForLinux",
            "typeHandlerVersion": "1.2",
            "settings": {
              "fileUris": "[variables('ubuntuScripts')]",
              "commandToExecute": "[concat('bash elasticsearch-ubuntu-install.sh -x', variables('commonShortOpts'), variables('commonInstallParams'))]"
            }
          },
        "client": {
            "publisher": "Microsoft.OSTCExtensions",
            "type": "CustomScriptForLinux",
            "typeHandlerVersion": "1.2",
            "settings": {
              "fileUris": "[variables('ubuntuScripts')]",
              "commandToExecute": "[concat('bash elasticsearch-ubuntu-install.sh -y', variables('commonShortOpts'), variables('commonInstallParams'))]"
            }
          },
        "data": {
          "publisher": "Microsoft.OSTCExtensions",
          "type": "CustomScriptForLinux",
          "typeHandlerVersion": "1.2",
          "settings": {
            "fileUris": "[variables('ubuntuScripts')]",
            "commandToExecute": "[concat('bash elasticsearch-ubuntu-install.sh -', variables('dataNodeShortOpt'), variables('commonShortOpts'), variables('commonInstallParams'))]"
          }
        }
      }
    },
    "OS" : "ubuntu",
    "osSettings": "[variables(concat(variables('OS'), 'Settings'))]",
    "locationMap": {
        "ResourceGroup":"[resourceGroup().location]",
        "westus":"[parameters('location')]",
        "eastus":"[parameters('location')]",
        "eastus2":"[parameters('location')]",
        "centralus":"[parameters('location')]",
        "southcentralus":"[parameters('location')]",
        "northcentralus":"[parameters('location')]",
        "eastasia":"[parameters('location')]",
        "southeastasia":"[parameters('location')]",
        "westeurope":"[parameters('location')]",
        "northeurope":"[parameters('location')]"
    },
    "location":"[variables('locationMap')[parameters('location')]]",
    "storageAccountPrefix": "elastic",
    "storageAccountNameShared": "[concat(variables('storageAccountPrefix'), 's', uniqueString(resourceGroup().id, deployment().name))]",
    "masterNodesIpPrefix": "10.0.0.1",
    "networkSettings": {
      "virtualNetworkName": "[parameters('virtualNetworkName')]",
      "addressPrefix": "10.0.0.0/16",
      "subnet": {
        "master": {
          "name": "master",
          "prefix": "10.0.0.0/24",
          "vnet": "[parameters('virtualNetworkName')]"
        },
        "data": {
          "name": "data",
          "prefix": "10.0.1.0/24",
          "vnet": "[parameters('virtualNetworkName')]"
        }
      }
    },
    "lbBackEndPoolsAdded": {
      "backendPools": [
        {
          "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer'),'/backendAddressPools/LBBE')]"
        }
      ]
    },
    "lbBackendPoolsRemoved": {
      "backendPools": []
    },
    "externalFELBConfig": [
      {
        "name": "LBFE",
        "properties": {
          "publicIPAddress": {
            "id": "[resourceId('Microsoft.Network/publicIPAddresses','publicIp')]"
          }
        }
      }
    ],
    "internalFELBConfig": [
      {
        "Name": "LBFE",
        "Properties": {
          "subnet": {
            "Id": "[concat(resourceId('Microsoft.Network/virtualNetworks',parameters('networkSettings').virtualNetworkName), '/subnets/', variables('networkSettings').subnet.master.name)]"
          },
          "privateIPAddress": "10.0.0.100",
          "privateIPAllocationMethod": "Static"
        }
      }
    ],
    "feLoadBalancerConfig": "[variables(concat(parameters('loadBalancerType'), 'FELBConfig'))]",

    "dataLBSettings0": "[variables('lbBackEndPoolsAdded')]",
    "dataLBSettings3": "[variables('lbBackendPoolsRemoved')]",
    "dataLBSettings5": "[variables('lbBackendPoolsRemoved')]",
    "dataLBSettings7": "[variables('lbBackendPoolsRemoved')]",
    "dataLBSettings": "[variables(concat('dataLBSettings', parameters('vmClientNodeCount')))]",
    "dataSkuSettings": {
      "Standard_D1": {
        "dataDisks":2,
        "nodesPerStorageAccount":6,
        "storageAccountType":"Standard_LRS"
      },
      "Standard_D2": {
        "dataDisks":4,
        "nodesPerStorageAccount":4,
        "storageAccountType":"Standard_LRS"
      },
      "Standard_D3": {
        "dataDisks":8,
        "nodesPerStorageAccount":3,
        "storageAccountType":"Standard_LRS"
      },
      "Standard_D4": {
        "dataDisks":16,
        "nodesPerStorageAccount":2,
        "storageAccountType":"Standard_LRS"
      },
      "Standard_DS1": {
        "dataDisks":2,
        "nodesPerStorageAccount":6,
        "storageAccountType":"Premium_LRS"
      },
      "Standard_DS2": {
        "dataDisks":4,
        "nodesPerStorageAccount":4,
        "storageAccountType":"Premium_LRS"
      },
      "Standard_DS3": {
        "dataDisks":8,
        "nodesPerStorageAccount":4,
        "storageAccountType":"Premium_LRS"
      },
      "Standard_DS4": {
        "dataDisks":16,
        "nodesPerStorageAccount":2,
        "storageAccountType":"Premium_LRS"
      },
      "Standard_DS13": {
        "dataDisks":16,
        "nodesPerStorageAccount":2,
        "storageAccountType":"Premium_LRS"
      },
      "Standard_A2": {
        "dataDisks":4,
        "nodesPerStorageAccount":6,
        "storageAccountType":"Standard_LRS"
      },
      "Standard_A3": {
        "dataDisks":8,
        "nodesPerStorageAccount":4,
        "storageAccountType":"Standard_LRS"
      },
      "Standard_A4": {
        "dataDisks":16,
        "nodesPerStorageAccount":2,
        "storageAccountType":"Standard_LRS"
      },
      "Standard_A7": {
        "dataDisks":16,
        "nodesPerStorageAccount":2,
        "storageAccountType":"Standard_LRS"
      }
    },
    "nodesPerStorageAccount":"[variables('dataSkuSettings')[parameters('vmSizeDataNodes')].nodesPerStorageAccount]",
    "storageBinPackMap": [
      "[div(sub(add(1, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(2, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(3, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(4, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(5, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(6, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(7, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(8, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(9, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(10, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(11, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(12, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(13, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(14, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(15, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(16, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(17, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(18, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(19, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(20, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(21, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(22, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(23, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(24, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(25, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(26, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(27, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(28, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(29, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(30, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(31, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(32, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(33, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(34, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(35, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(36, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(37, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(38, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(39, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(40, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(51, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(52, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(53, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(54, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(55, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(56, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(57, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(58, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(59, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "[div(sub(add(60, variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]"
    ],
    "dataNodeStorageSettings": {
      "count":"[div(sub(add(parameters('vmDataNodeCount'), variables('nodesPerStorageAccount')), 1), variables('nodesPerStorageAccount'))]",
      "mapping":"[variables('storageBinPackMap')]",
      "accountType":"[variables('dataSkuSettings')[parameters('vmSizeDataNodes')].storageAccountType]",
      "prefix":"[concat(variables('storageAccountPrefix'), 'd', uniqueString(resourceGroup().id, deployment().name))]"
    },
    "dataTemplateUrl": "[concat(variables('templateBaseUrl'), 'data-nodes-', string(variables('dataSkuSettings')[parameters('vmSizeDataNodes')].dataDisks), 'disk-resources.json')]"
  },
  "resources": [

    {
      "name": "networking",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "properties": {
        "mode": "Incremental"
      },
      "resources" : [
        {
          "type": "Microsoft.Storage/storageAccounts",
          "name": "[variables('storageAccountNameShared')]",
          "apiVersion": "2015-05-01-preview",
          "location": "[variables('location')]",
          "properties": {
            "accountType": "Standard_LRS"
          }
        },
        {
          "apiVersion": "2015-06-15",
          "type": "Microsoft.Network/publicIPAddresses",
          "name": "publicIp",
          "location": "[variables('location')]",
          "properties": {
            "publicIPAllocationMethod": "Dynamic"
          }
        },
        {
          "apiVersion": "2015-06-15",
          "type": "Microsoft.Network/virtualNetworks",
          "name": "[variables('networkSettings').virtualNetworkName]",
          "location": "[variables('location')]",
          "properties": {
            "addressSpace": {
              "addressPrefixes": [
                "[variables('networkSettings').addressPrefix]"
              ]
            },
            "subnets": [
              {
                "name": "[variables('networkSettings').subnet.master.name]",
                "properties": {
                  "addressPrefix": "[variables('networkSettings').subnet.master.prefix]"
                }
              },
              {
                "name": "[variables('networkSettings').subnet.data.name]",
                "properties": {
                  "addressPrefix": "[variables('networkSettings').subnet.data.prefix]"
                }
              }
            ]
          }
        },
        {
          "apiVersion": "2015-06-15",
          "name": "loadBalancer",
          "type": "Microsoft.Network/loadBalancers",
          "location": "[variables('location')]",
          "dependsOn": [
            "[concat('Microsoft.Network/publicIPAddresses/', 'publicIp')]"
          ],
          "properties": {
            "frontendIPConfigurations": "[variables('feLoadBalancerConfig')]",
            "backendAddressPools": [
              {
                "name": "LBBE"
              }
            ],
            "loadBalancingRules": [
              {
                "name": "es",
                "properties": {
                  "frontendIPConfiguration": {
                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer'),'/frontendIPConfigurations/LBFE')]"
                  },
                  "backendAddressPool": {
                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer'),'/backendAddressPools/LBBE')]"
                  },
                  "protocol": "tcp",
                  "frontendPort": 9200,
                  "backendPort": 9200,
                  "enableFloatingIP": false,
                  "idleTimeoutInMinutes": 5,
                  "probe": {
                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer'),'/probes/esProbe')]"
                  }
                }
              },
              {
                "name": "estransport",
                "properties": {
                  "frontendIPConfiguration": {
                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer'),'/frontendIPConfigurations/LBFE')]"
                  },
                  "backendAddressPool": {
                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer'),'/backendAddressPools/LBBE')]"
                  },
                  "protocol": "tcp",
                  "frontendPort": 9300,
                  "backendPort": 9300,
                  "enableFloatingIP": false,
                  "idleTimeoutInMinutes": 5
                }
              }
            ],
            "probes": [
              {
                "name": "esProbe",
                "properties": {
                  "protocol": "tcp",
                  "port": 9200,
                  "intervalInSeconds": 30,
                  "numberOfProbes": 3
                }
              }
            ]
          }
        }
      ]
    },


    {
      "name": "master-nodes",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'networking')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('masterTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('storageAccountNameShared')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "password": {
            "value": "[parameters('password')]"
          },
          "masterNodesIpPrefix": {
            "value": "[variables('masterNodesIpPrefix')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "vmSize": {
            "value": "[parameters('vmSizeMasterNodes')]"
          },
          "subnet": {
            "value": "[variables('networkSettings').subnet.master]"
          },
          "osSettings": {
            "value": "[variables('osSettings')]"
          }
        }
      }
    },

    {
      "name": "client-nodes",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'networking')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('clientTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "password": {
            "value": "[parameters('password')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountNameShared')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "subnet": {
            "value": "[variables('networkSettings').subnet.data]"
          },
          "vmSize": {
            "value": "[parameters('vmSizeClientNodes')]"
          },
          "osSettings": {
            "value": "[variables('osSettings')]"
          },
          "vmCount": {
            "value": "[parameters('vmClientNodeCount')]"
          },
          "lbBackendPools": {
            "value": "[variables('lbBackEndPoolsAdded')]"
          }
        }
      }
    },
    {
      "name": "data-nodes",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'networking')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('dataTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "password": {
            "value": "[parameters('password')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "storageSettings": {
            "value": "[variables('dataNodeStorageSettings')]"
          },
          "subnet": {
            "value": "[variables('networkSettings').subnet.data]"
          },
          "vmSize": {
            "value": "[parameters('vmSizeDataNodes')]"
          },
          "vmCount": {
            "value": "[parameters('vmDataNodeCount')]"
          },
          "namespace": {
            "value": "esdata"
          },
          "osSettings": {
            "value": "[variables('osSettings')]"
          },
          "lbBackendPools": {
            "value": "[variables('dataLBSettings')]"
          }
        }
      }
    },

    {
      "name": "jumpbox",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'networking')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('jumpboxTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('storageAccountNameShared')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "password": {
            "value": "[parameters('password')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "subnet": {
            "value": "[variables('networkSettings').subnet.data]"
          },
          "osSettings": {
            "value": "[variables('osSettings')]"
          }
        }
      }
    },

    {
      "name": "kibana",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'data-nodes')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('kibanaTemplateUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('storageAccountNameShared')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "password": {
            "value": "[parameters('password')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "subnet": {
            "value": "[variables('networkSettings').subnet.data]"
          },
          "osSettings": {
            "value": "[variables('ubuntuSettings')]"
          },
          "kibanaInstallCommand" : {
            "value":"[concat('bash kibana-install.sh -', variables('installPluginsShortOpt'), 'n ', variables('esSettings').clusterName, ' -v ', variables('esSettings').version, ' -S ', variables('esSettings').shieldKibanaServerPwd, ' -I ', reference(resourceId('Microsoft.Network/publicIPAddresses','publicIp')).ipAddress)]"
          }
        }
      }
    }
  ]
}
